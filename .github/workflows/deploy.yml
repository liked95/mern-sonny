name: Deploy to EC2

on:
  push:
    branches:
      - master

env:
  EC2_USER: ec2-user@13.236.137.92
  APP_DIRECTORY: /home/ec2-user/mern-sonny

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 0: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 1: Set up Node.js Environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Step 2: Build the Client App Image
      - name: Build the client app image
        run: |
          docker build -t myapp-client -f client/Dockerfile.prod .

      # Step 3: Build the Server App Image
      - name: Build the server app image
        run: |
          docker build -t myapp-server -f server/Dockerfile.prod .

      # Step 4: Copy the Client Build Files into the Server Image
      - name: Copy client build files into the server image
        run: |
          # Create a temporary container from the client image to access its build output
          docker create --name temp-container myapp-client
          docker cp temp-container:/app/dist ./client/dist
          docker rm temp-container

          # Build the server image and include the client files
          docker build -t myapp-server --build-arg CLIENT_DIST=./client/dist -f server/Dockerfile.prod .

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Step 6: Tag the Docker Image
      - name: Tag the Docker image
        run: |
          docker tag myapp-server:latest liked95/mern-sonny:${{ github.sha }}

      # Step 7: Push the Docker Image to Docker Hub
      - name: Push the Docker image to Docker Hub
        run: |
          docker push liked95/mern-sonny:${{ github.sha }}

      # Step 8: Deploy to EC2
      - name: Deploy to EC2
        run: |
          # Set up SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_USER >> ~/.ssh/known_hosts

          # Connect to EC2 and deploy
          ssh $EC2_USER << EOF
            set -e  # Stop on errors
            echo "Connecting to EC2 and starting deployment"
            
            # Navigate to the application directory
            cd $APP_DIRECTORY

            # Pull the latest Docker image
            echo "Pulling the latest Docker image"
            docker pull liked95/mern-sonny:${{ github.sha }}

            # Restart the services
            echo "Restarting Docker containers"
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d
            
            # Check running containers
            echo "Running Docker containers:"
            docker ps
          EOF
