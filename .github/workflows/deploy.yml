name: Deploy to EC2

on:
  push:
    branches:
      - master  # Trigger the workflow when changes are pushed to the master branch

env:
  EC2_USER: ec2-user                    # Username for the EC2 instance
  EC2_HOST: 13.236.137.92               # Public IP address of the EC2 instance
  APP_DIRECTORY: /home/ec2-user/mern-sonny  # Directory on EC2 where the app is deployed
  SERVER_IMAGE_BASE: liked95/mern-sonny  # Base path of the server image on Docker Hub

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner provided by GitHub Actions

    steps:
      # Step 1: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v2  # Fetch the repository code and make it available on the runner

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin  # Authenticate with Docker Hub

      # Step 3: Build Client and Server Images
      - name: Build client and server images
        run: |
          # Build the client image
          docker build -t myapp-client -f client/Dockerfile.prod .
          # Build the server image
          docker build -t myapp-server -f server/Dockerfile.prod .

      # Step 4: Push Docker Image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          # Assign the commit SHA to IMAGE_TAG
          IMAGE_TAG=${{ github.sha }}

          # Dynamically construct the full SERVER_IMAGE
          SERVER_IMAGE=$SERVER_IMAGE_BASE:$IMAGE_TAG

          # Tag the server image with the current commit SHA
          docker tag myapp-server:latest $SERVER_IMAGE

          # Push the tagged image to Docker Hub
          docker push $SERVER_IMAGE

      # Step 5: Set Up SSH to Access EC2
      - name: Set up SSH to Access EC2
        run: |
          mkdir -p ~/.ssh  # Create the SSH directory if it doesn't exist
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa  # Save the private key from GitHub Secrets
          chmod 600 ~/.ssh/id_rsa  # Restrict permissions for the private key
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts  # Add the EC2 instance to the SSH known hosts file

      # Step 6: Deploy to EC2
      - name: Deploy to EC2
        run: |
          # Dynamically construct the SERVER_IMAGE in the workflow
          SERVER_IMAGE=${{ env.SERVER_IMAGE_BASE }}:${{ github.sha }}

          ssh $EC2_USER@$EC2_HOST << EOF
            set -e  # Stop execution if any command fails
            cd $APP_DIRECTORY  # Navigate to the application directory on the EC2 instance
      
            echo "Deploying SERVER_IMAGE: $SERVER_IMAGE"

            # Pull the latest Docker image
            docker pull $SERVER_IMAGE

            # Restart the services with the latest image
            SERVER_IMAGE=$SERVER_IMAGE docker-compose -f docker-compose.prod.yml down
            SERVER_IMAGE=$SERVER_IMAGE docker-compose -f docker-compose.prod.yml up -d
            docker-compose -f docker-compose.prod.yml up config
          EOF

      # Step 7: Clean Up Docker
      - name: Clean up Docker
        run: |
          docker container prune -f  # Remove all stopped containers
          docker image prune -a -f  # Remove all unused images
          docker volume prune -f  # Remove all unused volumes