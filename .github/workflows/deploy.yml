name: Deploy to EC2

on:
  push:
    branches:
      - master  # Trigger the workflow when changes are pushed to the master branch

env:
  EC2_USER: ec2-user                    # Username for the EC2 instance
  EC2_HOST: 13.236.137.92               # Public IP address of the EC2 instance
  APP_DIRECTORY: /home/ec2-user/mern-sonny  # Directory on EC2 where the app is deployed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner provided by GitHub Actions

    steps:
      # Step 1: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v2  # Fetch the repository code and make it available on the runner

      # Step 2: Cache Docker Layers
      - name: Cache Docker layers
        uses: actions/cache@v3  # Use GitHub's caching action to cache Docker build layers
        with:
          path: /tmp/.buildx-cache  # Path to the cache directory for Docker layers
          key: ${{ runner.os }}-docker-${{ github.sha }}  # Unique cache key based on OS and commit SHA
          restore-keys: |
            ${{ runner.os }}-docker-  # Restore keys to reuse partial matches from the cache

      # Step 3: Build Client and Server Images
      - name: Build client and server images
        run: |
          # Build the client image using the cached layers
          docker build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache -t myapp-client -f client/Dockerfile.prod .
          # Build the server image using the cached layers
          docker build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache -t myapp-server -f server/Dockerfile.prod .

      # Step 4: Push Docker Image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          # Tag the server image with the current commit SHA
          docker tag myapp-server:latest liked95/mern-sonny:${{ github.sha }}
          # Push the tagged image to Docker Hub
          docker push liked95/mern-sonny:${{ github.sha }}

      # Step 5: Set Up SSH to Access EC2
      - name: Set up SSH to Access EC2
        run: |
          mkdir -p ~/.ssh  # Create the SSH directory if it doesn't exist
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa  # Save the private key from GitHub Secrets
          chmod 600 ~/.ssh/id_rsa  # Restrict permissions for the private key
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts  # Add the EC2 instance to the SSH known hosts file

      # Step 6: Deploy to EC2
      - name: Deploy to EC2
        run: |
          ssh $EC2_USER@$EC2_HOST << EOF
            set -e  # Stop execution if any command fails
            cd $APP_DIRECTORY  # Navigate to the application directory on the EC2 instance
            docker pull liked95/mern-sonny:${{ github.sha }}  # Pull the latest Docker image from Docker Hub
            docker-compose -f docker-compose.prod.yml down  # Stop any running containers
            docker-compose -f docker-compose.prod.yml up -d  # Start the containers in detached mode
          EOF

      # Step 7: Clean Up Docker
      - name: Clean up Docker
        run: |
          docker container prune -f  # Remove all stopped containers
          docker image prune -a -f  # Remove all unused images
          docker volume prune -f  # Remove all unused volumes